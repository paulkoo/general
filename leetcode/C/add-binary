char * addBinary(char * a, char * b) {
    printf("\na: %s", a);
    printf("\nb: %s", b);
    
    
    int aLen = strlen(a);
    int bLen = strlen(b);
    int len = (aLen > bLen ? aLen+2 : bLen+2);
    
    char out[len];
    out[len-1] = '\0';
    
    int plus = 0;
    
    for (int i = 0; i < len && (i <= aLen || i <= bLen); i++) {
        
        if (i < aLen) {
            if (a[aLen-i-1] == '1') {
                printf("\na[%d]: %c", aLen-i-1, a[aLen-i-1]);
                plus++;
            }
        }
           
        if (i < bLen) {
            if (b[bLen-i-1] == '1') {
                printf("\nb[%d]: %c", bLen-i-1, b[bLen-i-1]); 
                plus++;
            }
        }
        
        if (plus == 0){
            out[len-i-2] = '0';
            printf("\n+0");
        } else if (plus == 1) {
            out[len-i-2] = '1';
            plus--;
            printf("\n+1");
        } else if (plus == 2) {
            out[len-i-2] = '0';
            plus--;
            printf("\n+2");
        } else {
            out[len-i-2] = '1';
            plus -= 2;
            printf("\n+3");
        }
        printf("\nout :  %s", out);
    }
    
    if (out[0] == '0') {
        char outNew[--len];
        
        for (int i = 0; i < len; i++)
            outNew[i] = out[i+1];
        
        char *res = malloc(sizeof(char) * len);
        res = outNew;
    
        return res;
    }
    
    char *res = malloc(sizeof(char) * len);
    res = out;
    
    return res;
}
